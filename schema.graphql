type Claim @entity {
  id: ID! # Storage address + blocknumber
  claimID: String! # Actual IPFS content id of the claim.
  owner: Bytes! # The owner of the claim
  category: Int!
  bounty: BigInt! # uint256
  status: Status
  challenger: Bytes
  withdrawalPermittedAt: BigInt
  lastCalculatedScore: BigInt!
  createdAtBlock: BigInt!
  createdAtTimestamp: BigInt!
  lastBalanceUpdate: BigInt!
  disputeID: BigInt
  disputes: [DisputeEntity!] @derivedFrom(field: "claim")
  events: [EventEntity!] @derivedFrom(field: "claim")
  arbitrator: Arbitrator
  arbitratorExtraData: Bytes

}

type ClaimStorage @entity {
  id: ID! # Claim storage address
  claimEntityID: String! # primary key of Claim entity
}

type EvidenceEntity @entity {
  id: ID! # Evidence group id
  uri: String!
  sender: Bytes!
  blockNumber: BigInt!
}

type ContributionEntity @entity {
  id: ID! # DisputeID-round-contributor-ruling
  amount: BigInt!
  withdrew: Boolean!
}

type DisputeEntity @entity {
  id: ID! # DisputeID
  ruled: Boolean
  ruling: BigInt
  claim: Claim!
}

type EventEntity @entity {
  id: ID! # transactionHash-logIndex
  name: String!
  details: String # Any extra detail about an event
  timestamp: BigInt!
  from: Bytes!
  claim: Claim!
}

type MetaEvidenceEntity @entity {
  id: ID! # 0
  uri: String!
}

type CrowdfundingStatus @entity {
  id: ID! # disputeID-round-ruling
  fullyFunded: Boolean!
}

type Arbitrator @entity {
  id: ID! # contract address
  policies: [String!]
  timesPerPeriod: [[Int!]]
}

type XYZ @entity {
  id: ID!
}

enum Status {  "I don't know how to use this inside the mapping"
  Absent
  Debunked
  Withdrawn
  TimelockStarted
  Challenged
  Live
}
